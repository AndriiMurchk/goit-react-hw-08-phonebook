{"version":3,"file":"static/js/146.84f2271e.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/EditContactForm/EditContactForm.styled.jsx","components/EditContactForm/EditContactForm.jsx","service/stringAvatar.jsx","components/ContactItem/ContactItem.jsx","components/Sceleton/Sceleton.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx","service/validationScheme.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { Button, FormControl, FormHelperText, TextField } from \"@mui/material\";\n\nexport const Field = styled(TextField)`\n  & label {\n    color: rgba(0, 0, 0, 0.6);\n    }\n`;\n\nexport const Input = styled(FormControl)`\n  color: rgba(0, 0, 0, 0.6);\n  \n  & label {\n    color: rgba(0, 0, 0, 0.6);\n    }\n`;\n\nexport const CloseButton = styled(Button)`\n  position: absolute;\n  top: 0;\n`;\n\nexport const HelperText = styled(FormHelperText)`\n  text-align: center;\n  position: absolute;\n  background-color: white;\n  padding: 0 4px;\n  margin-left: 14px;\n`;","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Box, Container, Fab, Grid, Tooltip } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { enqueueSnackbar } from \"notistack\";\nimport { addContact } from \"redux/operations\";\nimport { selectContacts } from \"redux/selectors\";\nimport { alertOptions } from \"service/alertOptions\";\nimport { CloseButton, Field, HelperText } from \"./ContactForm.styled\";\nimport { contactSchema } from \"service/validationScheme\";\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const { register, handleSubmit, reset, control, formState: { errors } } = useForm({\n    resolver: yupResolver(contactSchema),\n    defaultValues: {\n      name: '',\n      number: '',\n    }\n  });\n  \n  const onFormSubmit = contact => {\n    const isExist = contacts.find(({ name }) => name.toLowerCase() === contact.name.toLowerCase());\n    if (isExist) {\n      return enqueueSnackbar(`${contact.name} is already in contacts.`, alertOptions('error'))\n    };\n    \n    dispatch(addContact(contact));\n    enqueueSnackbar(`${contact.name} was successfully added!`, alertOptions('success'));\n    reset();\n    onModalClose();\n  };\n\n  const onModalOpen = () => {\n    setModalOpen(true);\n  };\n\n  const onModalClose = () => {\n    setModalOpen(false);\n  };\n\n  const nameMessage = (errors.name?.message.charAt(0).toUpperCase()+ errors.name?.message.slice(1)) || '';\n  const numberMessage = (errors.number?.message.charAt(0).toUpperCase() + errors.number?.message.slice(1)) || '';\n  \n  return (\n    <Container component=\"div\" sx={{ mb: '16px' }}>\n      <Tooltip title=\"Add contact\" >\n        <Fab color=\"primary\" aria-label=\"add contact\" sx={{ position: \"absolute\", top: \"20px\", left: \"650px\" }} onClick={onModalOpen}>\n          <AddIcon />\n        </Fab>\n      </Tooltip>\n      <Dialog open={modalOpen} onClose={onModalClose} >\n        <DialogTitle>Add contact</DialogTitle>\n        <DialogContent>\n          <Box component=\"form\" onSubmit={handleSubmit(onFormSubmit)} sx={{ mt: 2 }}>\n            <Grid container>\n              <Grid item xs={12} sx={{ mb: '20px', position: 'relative' }}>\n                <Controller\n                  name=\"name\"\n                  control={control}\n                  render={({ field }) => <Field {...field} {...register(\"name\")}\n                    variant=\"standard\"\n                    label=\"Name *\"\n                    fullWidth\n                    type=\"text\"\n                    autoFocus\n                    id=\"name\"\n                  />} />\n                <HelperText sx={{ ml: '14px', color: '#a62633' }}>{nameMessage}</HelperText>\n              </Grid>\n              <Grid item xs={12} sx={{ mb: '20px', position: 'relative' }}>\n                <Controller\n                  name=\"number\"\n                  control={control}\n                  render={({ field }) => <Field {...field} {...register(\"number\")}\n                    variant=\"standard\"\n                    label=\"Phone number *\"\n                    fullWidth\n                    type=\"tel\"\n                    autoComplete=\"number\"\n                    id=\"number\"\n                  />} />\n                <HelperText sx={{ ml: '14px', color: '#a62633' }}>{numberMessage}</HelperText>\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Add contact\n            </Button>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <CloseButton onClick={onModalClose} sx={{ position: \"absolute\", top: \"8px\", right: \"8px\", p: '0', minWidth:'24px' }}><CloseIcon /></CloseButton>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  )\n}\n\nexport default ContactForm;","import styled from \"styled-components\";\nimport { FormControl, FormHelperText, TextField } from \"@mui/material\";\n\nexport const Field = styled(TextField)`\n  & label {\n    color: rgba(0, 0, 0, 0.6);\n    }\n`;\n\nexport const Input = styled(FormControl)`\n  color: rgba(0, 0, 0, 0.6);\n  \n  & label {\n    color: rgba(0, 0, 0, 0.6);\n    }\n`;\n\nexport const HelperText = styled(FormHelperText)`\n  position: absolute;\n  bottom: -9px;\n  background-color: white;\n  padding: 0 4px;\n  margin-left: 14px;\n`;\n\nexport const Header = styled.h3`\n  text-align: center;\n  margin: 24px 0;\n  font-size: 24px;\n  color: #0b7529;\n`","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { selectContacts } from \"redux/selectors\";\nimport { editContact } from \"redux/operations\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Box, Grid, Button, Paper } from \"@mui/material\";\nimport { enqueueSnackbar } from \"notistack\";\nimport { alertOptions } from \"service/alertOptions\";\nimport { contactSchema } from \"service/validationScheme\";\nimport { Field, Header, HelperText } from \"./EditContactForm.styled\";\n\nconst EditContactForm = ({ id, onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n  const { register, handleSubmit, reset, control, formState: { errors }, setValue } = useForm({\n    resolver: yupResolver(contactSchema),\n  });\n\n  useEffect(() => {\n    const contact = contacts.find(contact => contact.id === id);\n    setName(contact.name);\n    setNumber(contact.number);\n    setValue(\"name\", contact.name);\n    setValue(\"number\", contact.number);\n  }, [id, contacts, setValue])\n\n  const onFormSubmit = editedData => {\n    dispatch(editContact({ editedData, id }));\n    enqueueSnackbar(`Contact was successfully changed!`, alertOptions('success'));\n    reset();\n    onClose();\n  };\n    \n  const onChange = (e) => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        setValue(\"name\", e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        setValue(\"number\", e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n  \n  const nameMessage = (errors.name?.message.charAt(0).toUpperCase() + errors.name?.message.slice(1)) || '';\n  const numberMessage = (errors.number?.message.charAt(0).toUpperCase() + errors.number?.message.slice(1)) || '';\n\n  return (\n    <Paper elevation={3} sx={{ p: '16px' }}>\n      <Box component=\"form\"\n        onSubmit={handleSubmit(onFormSubmit)}>\n        <Header>Edit contact:</Header>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sx={{position: 'relative'}}>\n            <Controller\n              name=\"name\"\n              control={control}\n              render={({ field }) => <Field {...field} {...register(\"name\")}\n                variant=\"standard\"\n                label=\"Name *\"\n                fullWidth\n                type=\"text\"\n                autoFocus\n                id=\"name\"\n                value={name}\n                onChange={(event) => onChange(event)}\n              />} />\n            <HelperText sx={{ ml: '14px', color: '#a62633' }}>{nameMessage}</HelperText>\n          </Grid>\n          <Grid item xs={12} sx={{position: 'relative'}}>\n            <Controller\n              name=\"number\"\n              control={control}\n              render={({ field }) => <Field {...field} {...register(\"number\")}\n                variant=\"standard\"\n                label=\"Number *\"\n                fullWidth\n                type=\"tel\"\n                id=\"number\"\n                value={number}\n                onChange={(event) => onChange(event)}\n              />} />\n            <HelperText sx={{ ml: '14px', color: '#a62633' }}>{numberMessage}</HelperText>\n          </Grid>\n        </Grid>\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          sx={{ mt: 3, mb: 2 }}\n        >\n          Save changes\n        </Button>\n      </Box>\n    </Paper>\n  )\n};\n\nexport default EditContactForm;","function stringToColor(string) {\n    let hash = 0;\n    let i;\n\n    /* eslint-disable no-bitwise */\n    for (i = 0; i < string.length; i += 1) {\n        hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = '#';\n\n    for (i = 0; i < 3; i += 1) {\n        const value = (hash >> (i * 8)) & 0xff;\n        color += `00${value.toString(16)}`.slice(-2);\n    }\n    /* eslint-enable no-bitwise */\n\n    return color;\n}\n\nexport function stringAvatar(name) {\n    return {\n        sx: {\n            bgcolor: stringToColor(name),\n        },\n        children: `${name[0].toUpperCase()}`,\n    };\n}","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/operations\";\nimport { stringAvatar } from \"service/stringAvatar\";\nimport { Avatar, Divider, IconButton, ListItemButton, ListItemIcon, ListItemText, Tooltip } from \"@mui/material\"\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\n\nconst ContactItem = ({ contact, editContact, handleListItemClick, selected }) => {\n    const dispatch = useDispatch();\n\n    const { id, name, number } = contact;\n\n    const deleteContactById = (contactId) => {\n        dispatch(deleteContact(contactId));\n    };\n\n    return <li>\n        <ListItemButton\n            component=\"div\"\n            onClick={(event) => handleListItemClick(event, id)}\n            selected={selected}\n        >\n            <ListItemIcon>\n                <Avatar {...stringAvatar(`${name}`)}></Avatar>\n            </ListItemIcon>\n            <ListItemText primary={<p>{name}: {number}</p>} />\n            <Tooltip title=\"Delete\" onClick={() => deleteContactById(id)} sx={{ mr: '8px' }}>\n                <IconButton aria-label=\"delete contact\" color=\"error\" size=\"large\">\n                    <DeleteIcon />\n                </IconButton>\n            </Tooltip>\n            <Tooltip\n                title=\"Edit\"\n                onClick={() => editContact(id)}\n                className=\"button-edit\">\n                <IconButton aria-label=\"edit contact\"  color=\"primary\" className=\"button-edit\">\n                    <EditIcon className=\"button-edit\"/>\n                </IconButton>\n            </Tooltip>\n        </ListItemButton>\n        <Divider variant=\"inset\" component=\"div\" key={`div${id}`} />\n    </li>\n};\n\nexport default ContactItem;","import { ListItemButton, ListItemIcon, Skeleton } from \"@mui/material\";\n\nconst ContactsSceleton = () => {\n    return (<>\n        <ListItemButton component=\"div\">\n            <ListItemIcon><Skeleton variant=\"circular\" width={40} height={40} animation=\"wave\" /></ListItemIcon>\n            <Skeleton variant=\"text\" width={376} sx={{ fontSize: '16px' }} animation=\"wave\" />\n        </ListItemButton>\n        <ListItemButton component=\"div\">\n            <ListItemIcon><Skeleton variant=\"circular\" width={40} height={40} animation=\"wave\" /></ListItemIcon>\n            <Skeleton variant=\"text\" width={376} sx={{ fontSize: '16px' }} animation=\"wave\" />\n        </ListItemButton>\n        <ListItemButton component=\"div\">\n            <ListItemIcon><Skeleton variant=\"circular\" width={40} height={40} animation=\"wave\" /></ListItemIcon>\n            <Skeleton variant=\"text\" width={376} sx={{ fontSize: '16px' }} animation=\"wave\" />\n        </ListItemButton>\n        <ListItemButton component=\"div\">\n            <ListItemIcon><Skeleton variant=\"circular\" width={40} height={40} animation=\"wave\" /></ListItemIcon>\n            <Skeleton variant=\"text\" width={376} sx={{ fontSize: '16px' }} animation=\"wave\" />\n        </ListItemButton>\n        <ListItemButton component=\"div\">\n            <ListItemIcon><Skeleton variant=\"circular\" width={40} height={40} animation=\"wave\" /></ListItemIcon>\n            <Skeleton variant=\"text\" width={376} sx={{ fontSize: '16px' }} animation=\"wave\" />\n        </ListItemButton>\n        <ListItemButton component=\"div\">\n            <ListItemIcon><Skeleton variant=\"circular\" width={40} height={40} animation=\"wave\" /></ListItemIcon>\n            <Skeleton variant=\"text\" width={376} sx={{ fontSize: '16px' }} animation=\"wave\" />\n        </ListItemButton>\n    </>\n    )\n};\n\nexport default ContactsSceleton;","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectError, selectFilteredContacts, selectIsLoading } from \"redux/selectors\";\nimport { fetchContacts } from \"redux/operations\";\nimport { Box, Container, Grid, List} from \"@mui/material\";\nimport EditContactForm from \"components/EditContactForm/EditContactForm\";\nimport ContactItem from \"components/ContactItem/ContactItem\";\nimport ContactsSceleton from \"components/Sceleton/Sceleton\";\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [contactId, setContactId] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState('');\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n  const handleListItemClick = (event, id) => {\n    setSelectedIndex(id);\n  };\n  \n  const onFormClose = (e) => {\n    if (e.target.classList.contains('button-edit')) {\n      return;\n    }\n      setIsFormOpen(false);\n      setContactId('');\n  }\n    \n  const editContact = (id) => {\n    setContactId(id);\n    setIsFormOpen(true);\n  };\n\n  return (\n    <Container component=\"div\">\n      <Grid container columnSpacing={3}>\n        <Grid item xs={7}>\n          <Box sx={{ width: '100%', maxWidth: 600, bgcolor: 'background.paper' }}>\n            {filteredContacts.length !== 0 &&\n              <List component=\"ul\" aria-label=\"Contacts list\">\n                {filteredContacts.map((contact) => (\n                  <ContactItem\n                    key={contact.id}\n                    contact={contact}\n                    editContact={editContact}\n                    handleListItemClick={handleListItemClick}\n                    selected={contact.id === selectedIndex}></ContactItem>\n                ))}\n              </List>}\n            {isLoading && !error && <ContactsSceleton />}\n            {error && <p>Oh no! Something went wrong. Please, try again later.</p>}\n          </Box>\n        </Grid>\n        {isFormOpen && contactId &&\n          <ClickAwayListener onClickAway={onFormClose}>\n            <Grid item xs={5} sx={{ pl: '0' }}>\n              <EditContactForm id={contactId} onClose={onFormClose} />\n            </Grid>\n          </ClickAwayListener>\n        }\n      </Grid>\n   </Container>\n  )\n};\n\nexport default ContactsList;","import styled from \"styled-components\";\nimport { Box, TextField } from \"@mui/material\";\nimport SearchIcon from '@mui/icons-material/Search';\n\nexport const Field = styled(TextField)`\n  width: 400px;\n  padding-left: 8px;\n  position: relative;\n  border-radius: 2;\n  \n  & label {\n    color: rgba(0, 0, 0, 0.6);\n    margin-left: 8px;\n  }\n  \n  & input {\n    margin-left: 8px;\n  }\n`\n\nexport const Form = styled(Box)`\n  width: 400px;\n  position: relative;\n`\n\nexport const Icon = styled(SearchIcon)`\n  position: absolute;\n  right: 4px;\n  bottom: 4px;\n  color: #50c5e9;\n`","import { Container } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter } from \"redux/filterSlice\";\nimport { selectFilter } from \"redux/selectors\";\nimport { Field, Form, Icon } from \"./Filter.styled\";\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    \n    const onChange = (e) => {\n        let contactToFind = e.target.value.trim();\n        dispatch(setFilter(contactToFind));\n    };\n\n    return (\n        <Container component=\"div\">\n            <Form component=\"form\" sx={{ mb: '36px' }}>\n                <Field id=\"filter\" label=\"Find contacts by name\" variant=\"standard\" size=\"small\"\n                    onChange={onChange}\n                    value={filter}>\n                </Field>\n                <Icon />\n            </Form>    \n        </Container>    \n    )\n}\n\nexport default Filter;","import { Box, Container } from \"@mui/material\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactsList from \"components/ContactsList/ContactsList\";\nimport Filter from \"components/Filter/Filter\";\n\nconst ContactsPage = () => {\n    return <Box component=\"main\" sx={{ position: \"relative\" }}>\n        <Container maxWidth='xl' sx={{ boxShadow: 1, p: 3 }}>\n            <Filter />\n            <ContactForm />\n            <ContactsList />\n        </Container>\n    </Box>\n};\n\nexport default ContactsPage;","import { object, string } from 'yup';\n\nconst phoneRegExp = /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nexport const contactSchema = object({\n  name: string().required(),\n  number: string().min(5).matches(phoneRegExp, \"Invalid phone number\").required(),\n});\n\nexport const loginSchema = object({\n  email: string().email().required(),\n  password: string().required().min(7),\n});\n\nexport const registerSchema = object({\n  name: string().required(),\n  email: string().email().required(),\n  password: string().required().min(7),\n});"],"names":["Field","styled","TextField","CloseButton","FormControl","Button","HelperText","FormHelperText","dispatch","useDispatch","contacts","useSelector","selectContacts","useState","modalOpen","setModalOpen","useForm","resolver","yupResolver","contactSchema","defaultValues","name","number","register","handleSubmit","reset","control","errors","formState","onModalClose","nameMessage","message","charAt","toUpperCase","slice","numberMessage","Container","component","sx","mb","Tooltip","title","Fab","color","position","top","left","onClick","Add","Dialog","open","onClose","DialogTitle","DialogContent","Box","onSubmit","contact","find","toLowerCase","enqueueSnackbar","alertOptions","addContact","mt","Grid","container","item","xs","render","field","variant","label","fullWidth","type","autoFocus","id","ml","autoComplete","DialogActions","right","p","minWidth","Close","Header","setName","setNumber","setValue","useEffect","onChange","e","target","value","Paper","elevation","editedData","editContact","spacing","event","stringToColor","string","i","hash","length","charCodeAt","toString","stringAvatar","bgcolor","children","handleListItemClick","selected","ListItemButton","ListItemIcon","Avatar","ListItemText","primary","contactId","deleteContact","mr","IconButton","size","Delete","className","Edit","Divider","Skeleton","width","height","animation","fontSize","filteredContacts","selectFilteredContacts","isLoading","selectIsLoading","error","selectError","isFormOpen","setIsFormOpen","setContactId","selectedIndex","setSelectedIndex","fetchContacts","onFormClose","classList","contains","columnSpacing","maxWidth","List","map","ClickAwayListener","onClickAway","pl","Form","Icon","SearchIcon","filter","selectFilter","contactToFind","trim","setFilter","boxShadow","object","required","min","matches","loginSchema","email","password","registerSchema"],"sourceRoot":""}